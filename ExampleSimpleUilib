local GUI = nil

local library_url = "https://your.raw.url.here/guilibrary.lua" 

http.get(library_url, function(library_code, success, headers)
    if success and library_code then
        local loaded_ok, lib_or_err = pcall(loadstring(library_code))
        
        if loaded_ok and type(lib_or_err) == "table" then
            GUI = lib_or_err -- Assign the library table itself
            print("UI Library loaded successfully!")
        else
            print("Error executing UI Library code:", lib_or_err)
        end
    else
        print("Failed to download UI Library. Status:", headers and headers.status)
    end
end)

-- This function creates the entire interface after loading the library.
local function setup_ui()
    if not GUI then return end

    -- =================== WINDOW 1: BASIC ELEMENTS ===================
    local main_window = GUI:new_window("Main Controls", 100, 100, 300)

    -- TAB 1: BASIC ELEMENTS
    main_window:add_tab("Basic")
    
    -- 'add_label' - Just displays the text.
    main_window:add_label("This is an informational label.")
    
    -- 'add_separator' - Horizontal line for separation.
    main_window:add_separator()
    
    -- 'add_checkbox' - Standard checkbox (on/off).
    local my_checkbox = main_window:add_checkbox("Enable Feature")
    
    -- 'add_slider' is a slider for selecting a numeric value.
    local my_slider = main_window:add_slider("Field of View", 60, 120, 90)
    
    -- 'add_button' is a button that performs a function when clicked.
    main_window:add_button("Show Notification", function() 
        GUI:add_notification("Button Pressed!") 
    end)
    
    -- `add_keybind' - Key assignment. Used to close the menu.
    local menu_toggle_key = main_window:add_keybind("Toggle Menu", 0x2D) -- 0x2D = Insert

    -- TAB 2: INPUT AND SELECTION
    main_window:add_tab("Inputs")
    
    -- `add_dropdown` is a drop-down list with one choice.
    main_window:add_dropdown("Select Mode", {"Option 1", "Option 2", "Option 3"})
    
    -- `add_multiselect` is a drop-down list with multiple selections.
    main_window:add_multiselect("Select Flags", {"Flag A", "Flag B", "Flag C"})
    
    main_window:add_separator()
    
    -- 'add_textinput' is a text input field.
    main_window:add_textinput("Watermark", "My Script")
    
    -- 'add_colorpicker' - Palette for color selection.
    main_window:add_colorpicker("ESP Color", {255, 0, 0, 255})
    
    -- =================== WINDOW 2: LAYOUT ===================
    local layout_window = GUI:new_window("Layout Demo", 450, 100, 400)
    
    layout_window:add_tab("Layout Demo")
    
    -- `begin_groupbox` / `end_groupbox' - Creates a container with a header.
    layout_window:begin_groupbox("Groupbox Example")
        layout_window:add_label("Controls inside a groupbox.")
        layout_window:add_checkbox("Grouped Checkbox")
    layout_window:end_groupbox()
    
    layout_window:begin_groupbox("Columns Example")
-- `begin_columns` / `end_columns' - Divides the area into columns.
        layout_window:begin_columns(2)
        
        -- Column 1
        layout_window:add_label("Column 1")
        layout_window:add_checkbox("Checkbox A")
        layout_window:add_slider("Slider A", 0, 100, 25)
        
        -- `next_column' - Moves to the next column.
        layout_window:next_column()
        
        -- Column 2
        layout_window:add_label("Column 2")
        layout_window:add_checkbox("Checkbox B")
        layout_window:add_slider("Slider B", 0, 100, 75)
        
        layout_window:end_columns()
    layout_window:end_groupbox()
    
    -- We return the keybind element to use it to close the menu.
    return menu_toggle_key
end

local menu_toggle_key = nil
local menu_open = true

cheat.set_callback("paint", function()
-- Waiting until the library is fully loaded.
    if not GUI then return end
    
    -- We create the interface in the first frame after loading.
    if not menu_toggle_key then
        menu_toggle_key = setup_ui()
    end

    -- Logic for opening/closing the menu using the assigned key.
    if GUI:is_keybind_active(menu_toggle_key) then
        -- This check is necessary so that the menu switches only once per click.
        if not menu_toggle_key.was_pressed then
            menu_open = not menu_open
            for _, wnd in ipairs(GUI.windows) do
                wnd.open = menu_open
            end
            menu_toggle_key.was_pressed = true
        end
    else
        menu_toggle_key.was_pressed = false
    end

    -- These two functions must be called every frame.
    GUI:update_keybinds()
    GUI:draw()
end)
